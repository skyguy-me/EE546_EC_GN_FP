--  * Copyright (C) <2025> <EMBER CHOW AND GOKUL NATHAN>
--  *
--  * This program is free software; you can redistribute it and/or modify
--  * it under the terms of the GNU General Public License as published by
--  * the Free Software Foundation; either version 3 of the License, or (at
--  * your option) any later version.
--  *
--  * This program is distributed in the hope that it will be useful,
--  * but WITHOUT ANY WARRANTY; without even the implied warranty of
--  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--  * General Public License for more details.
--  *
--  * You should have received a copy of the GNU General Public License
--  * along with this program; if not, see <http://www.gnu.org/licenses/>.


import Mathlib.Analysis.Complex.Basic
import Mathlib.Analysis.SpecificLimits.Normed

import Mathlib.Data.Set.Basic
import Mathlib.Data.Real.Basic
import Mathlib.Data.Complex.Exponential
import Mathlib.Data.Complex.Basic

import Mathlib.Algebra.Group.Indicator

import Mathlib.Topology.Algebra.InfiniteSum.Defs
import Mathlib.Topology.Basic
import Mathlib.Topology.Filter

import Mathlib.Tactic.Linarith


import EE546ECGNFP.Defs -- Useful definitions for implementing engineering Z-transforms
import EE546ECGNFP.Signal -- USeful examining the signal properties

open Filter Topology Controls Controls.Discrete

set_option maxHeartbeats 10000000
set_option maxRecDepth 1000

-- Basic Definiton of Z-transforms
@[simp]
noncomputable def ZTransform (x : DiscreteSignal) (z : ‚ÑÇ) :=
  ‚àë' k : ‚Ñ§, x (k) * z^(-k : ‚Ñ§)

@[simp]
def HasZTransform (f : DiscreteSignal) (F : ‚ÑÇ ‚Üí ‚ÑÇ) (z : ‚ÑÇ) := HasSum (fun (k : ‚Ñ§) ‚Ü¶ f k * z ^ (-k : ‚Ñ§)) (F z)

@[simp]
def ZTransformable (f : DiscreteSignal) (z : ‚ÑÇ) := Summable fun k ‚Ü¶ f k * z ^ (-k)

@[simp]
noncomputable def ZTransformUnilateral (x : DiscreteSignal) (z : ‚ÑÇ) :=
  ‚àë' k : ‚Ñï, x (k) * z^(-k : ‚Ñ§)

def HasZTransformUnilateral (x : DiscreteSignal) (z : ‚ÑÇ) := HasSum (fun (n : ‚Ñï) ‚Ü¶ x n * z ^ (-n : ‚Ñ§))

@[simp]
noncomputable def ZTransformUnilateral' (x : DiscreteSignal) (z : ‚ÑÇ) :=
  ‚àë' k : NonNegInt, x (k) * z ^ (-‚Üëk : ‚Ñ§)

@[simp]
noncomputable def DiscreteTimeFourierTransform (x : DiscreteSignal) (œâ : ‚Ñù) :=
  ‚àë' k : ‚Ñ§, x (k) * Complex.exp (-j * œâ * k)

@[simp]
alias ZT := ZTransform

@[simp]
alias DTFT := DiscreteTimeFourierTransform

notation "ùì©" => ZTransform
notation "ùì©_u" => ZTransformUnilateral
notation "ùìï_d" => DiscreteTimeFourierTransform

theorem zt_unit_impulse {z : ‚ÑÇ} (k‚ÇÄ : ‚Ñ§) : HasZTransform (fun k ‚Ü¶ Œ¥ (k - k‚ÇÄ)) (fun z : ‚ÑÇ ‚Ü¶ (z ^ (-k‚ÇÄ))) z := by
  simp[Int.sub_eq_zero]
  convert hasSum_ite_eq k‚ÇÄ (z ^ k‚ÇÄ)‚Åª¬π





theorem ZTUnilateral_hasSum_equiv {z : ‚ÑÇ} {a : ‚ÑÇ} (x : DiscreteSignal) :
  HasSum (fun n : ‚Ñï ‚Ü¶ x n * z ^ (-n : ‚Ñ§)) a ‚Üî
  HasSum (fun k : NonNegInt ‚Ü¶ x k * z ^ (-k : ‚Ñ§)) a := by
    exact Equiv.hasSum_iff nonNegInt_nat_equiv.symm (a := a) (
      f := fun (k : NonNegInt) ‚Ü¶ x k * z ^ (-k : ‚Ñ§))

/- This theorem ensures that we can switch between summing over ‚Ñï and summing over NonNegInt, a more structured subset of  ‚Ñ§. This transition is useful for formalizing summation equivalences in Lean-/

theorem ZTUnilateral_summable_equiv{z : ‚ÑÇ} (x : DiscreteSignal) :
  Summable (fun n : ‚Ñï ‚Ü¶ x n * z ^ (-n : ‚Ñ§)) ‚Üî
  Summable (fun k : NonNegInt ‚Ü¶ x k * z ^ (-k : ‚Ñ§)) := by
    exact Equiv.summable_iff nonNegInt_nat_equiv.symm (
      f := fun (k : NonNegInt) ‚Ü¶ x k * z ^ (-k : ‚Ñ§))

/-This theorem ensures that summability properties hold when switching between standard natural number summations and structured integer sets-/

theorem ZTUnilateral_tsum_equiv {z : ‚ÑÇ} (x : DiscreteSignal) :
  (ZTransformUnilateral x) z = (ZTransformUnilateral' x) z := by
    exact Equiv.tsum_eq nonNegInt_nat_equiv.symm (
      fun (k : NonNegInt) ‚Ü¶ x k * z ^ (-k : ‚Ñ§)
    )

theorem indicator_one_mul {Œ± Œ≤ : Type*} [Semiring Œ≤] {A : Set Œ±} (a : Œ±) (f : Œ± ‚Üí Œ≤) :
    A.indicator 1 a * f a = A.indicator (fun a' ‚Ü¶ f a') a := by
      by_cases ha : a ‚àà A
      <;> simp[ha]

theorem zt_summable_causal {z : ‚ÑÇ} {f : DiscreteSignal} :
    (hf : IsCausal f) ‚Üí
    Summable (fun (k : ‚Ñ§) ‚Ü¶ f k * z ^ (-k : ‚Ñ§)) ‚Üî
    Summable (fun (n : ‚Ñï) ‚Ü¶ f n * z ^ (-n : ‚Ñ§)) := by
      intro hf
      apply Iff.intro
      . intro hmp
        simp only[ZTUnilateral_summable_equiv]
        rw[indicator_of_IsCausal_mul hf] at hmp
        exact (summable_subtype_iff_indicator).mpr hmp

      . intro hmpr
        simp only[‚Üêsummable_univ (f := fun k : ‚Ñ§ ‚Ü¶ f k * z ^ (-k : ‚Ñ§))]
        convert Summable.add_compl (s := NegInt) (f := fun k : ‚Ñ§ ‚Ü¶ f k * z ^ (-k : ‚Ñ§)) ?_ ?_

        . exact summable_univ (f := fun k : ‚Ñ§ ‚Ü¶ f k * z ^ (-k : ‚Ñ§))

        . change Summable (fun k : NegInt ‚Ü¶ f k * z ^ (-k : ‚Ñ§))
          refine summable_zero_of_causal (f := fun k ‚Ü¶ f k * z ^ (-k : ‚Ñ§)) ?_
          exact isCausal_of_causal_mul hf

        . change Summable (fun k : ‚ÜëNegInt·∂ú ‚Ü¶ f k * z ^ (-k : ‚Ñ§))
          rw[NegIntComp]
          simp only[‚ÜêZTUnilateral_summable_equiv]
          exact hmpr

/-This theorem shows that if a signal is causal, we can restrict summation to non-negative indices. It justifies the transition from bilateral to unilateral Z-transforms.-/


theorem zt_sum_causal {z : ‚ÑÇ} {f : DiscreteSignal} {S : ‚ÑÇ} :
    (hf : IsCausal f) ‚Üí
    HasSum (fun (k : ‚Ñ§) ‚Ü¶ f k * z ^ (-k : ‚Ñ§)) S ‚Üî
    HasSum (fun (n : ‚Ñï) ‚Ü¶ f n * z ^ (-n : ‚Ñ§)) S := by
      intro hf
      apply Iff.intro
      . intro hmp
        simp only[ZTUnilateral_hasSum_equiv]
        rw[indicator_of_IsCausal_mul hf] at hmp
        exact (hasSum_subtype_iff_indicator).mpr hmp

      . intro hmpr
        simp only[‚ÜêhasSum_univ (f := fun k : ‚Ñ§ ‚Ü¶ f k * z ^ (-k : ‚Ñ§))]
        rw[‚Üêneg_nonneg_union]
        convert HasSum.add_disjoint (a := 0) (b := S) (f := fun k : ‚Ñ§ ‚Ü¶ f k * z ^ (-k : ‚Ñ§)) int_neg_nonneg_disjoint ?_ ?_

        . rw[zero_add]

        . change HasSum (fun k : NegInt ‚Ü¶ f k * z ^ (-k : ‚Ñ§)) 0
          refine hasSum_zero_of_causal (f := fun k ‚Ü¶ f k * z ^ (-k : ‚Ñ§)) ?_
          exact isCausal_of_causal_mul hf

        . change HasSum (fun k : NonNegInt ‚Ü¶ f k * z ^ (-k : ‚Ñ§)) S
          simp only[‚ÜêZTUnilateral_hasSum_equiv]
          exact hmpr


theorem zt_sum_unit_step {z : ‚ÑÇ} {f : DiscreteSignal} {S : ‚ÑÇ} :
    HasSum (fun (k : ‚Ñ§) ‚Ü¶ u k * f k * z ^ (-k : ‚Ñ§)) S ‚Üî
    HasSum (fun (n : ‚Ñï) ‚Ü¶ f n * z ^ (-n : ‚Ñ§)) S := by

      convert zt_sum_causal (causal_of_unit_step_mul f) with n
      simp[u]


/-The preceding sub-theorems systematically reduce summation complexity and enforce causality in formal Z-transform proofs. They ensure that we only consider non-negative indices, enabling a rigorous transition from bilateral to unilateral Z-transforms. With all that done, we can finaly prove the unit step Z-transformation -/

theorem zt_unit_step {z : ‚ÑÇ} (h_roc : ‚Äñz‚Äñ > 1) : HasZTransform u (fun z ‚Ü¶ (1 / (1 - z‚Åª¬π))) z := by
  rw[HasZTransform]

  suffices ‚àÄ k, u k * z ^ (-k) = u k * 1 * z ^ (-k) by
    simp only [this]

    refine' zt_sum_unit_step.mpr _
    simp
    simp only[‚Üêinv_pow]

    refine' hasSum_geometric_of_norm_lt_one _
    rw[norm_inv, inv_lt_comm‚ÇÄ] <;> linarith

  simp





theorem ZTransformToDTFT : ‚àÄ x : DiscreteSignal, (fun œâ : ‚Ñù => ùì© x (Complex.exp (j * œâ))) = ùìï_d x := by
  intro x
  ext œâ
  simp
  apply tsum_congr
  intro k
  calc
    x k * (Complex.exp (j * ‚Üëœâ) ^ k)‚Åª¬π
      = x k * (Complex.exp (j * ‚Üëœâ * ‚Üëk))‚Åª¬π := by rw [‚Üê Complex.exp_int_mul (j * ‚Üëœâ) k]; ring_nf
    _ = x k * Complex.exp (-(j * ‚Üëœâ * ‚Üëk)) := by rw [‚ÜêComplex.exp_neg (j * ‚Üëœâ * ‚Üëk)]



theorem zt_mul_left (z : ‚ÑÇ) (f‚ÇÅ : DiscreteSignal) (F‚ÇÅ : ‚ÑÇ ‚Üí ‚ÑÇ) (a : ‚ÑÇ)
(hz‚ÇÅ : HasZTransform f‚ÇÅ F‚ÇÅ z) :
  HasZTransform (fun k => a * f‚ÇÅ k) (fun z => a * F‚ÇÅ z) z := by
  unfold HasZTransform
  change HasSum (fun k ‚Ü¶ a * f‚ÇÅ k * z ^ (-k)) (( a * F‚ÇÅ z))
  simp only[mul_assoc]
  apply HasSum.mul_left a hz‚ÇÅ

theorem zt_mul_right (z : ‚ÑÇ) (f‚ÇÅ : DiscreteSignal) (F‚ÇÅ : ‚ÑÇ ‚Üí ‚ÑÇ) (a : ‚ÑÇ)
(hz‚ÇÅ : HasZTransform f‚ÇÅ F‚ÇÅ z) :
  HasZTransform (fun k => f‚ÇÅ k * a) (fun z => F‚ÇÅ z * a) z := by
  unfold HasZTransform
  change HasSum (fun k ‚Ü¶  f‚ÇÅ  k  * a * z ^ (-k) ) ((F‚ÇÅ z * a))
  have: (Œª k ‚Ü¶ f‚ÇÅ  k  * a * z ^ (-k)) = (Œª k ‚Ü¶ f‚ÇÅ  k   * z ^ (-k) * a ):= by
    ext k
    ring_nf
  -- ‚ä¢ HasSum (fun k ‚Ü¶ f‚ÇÅ k * a * z ^ (-k)) (F‚ÇÅ z * a)
  simp only[this]
  apply HasSum.mul_right a hz‚ÇÅ

theorem zt_add (z : ‚ÑÇ) (f‚ÇÅ f‚ÇÇ : DiscreteSignal) (F‚ÇÅ F‚ÇÇ : ‚ÑÇ ‚Üí ‚ÑÇ) (hz‚ÇÅ : HasZTransform f‚ÇÅ F‚ÇÅ z)  (hz‚ÇÇ: HasZTransform f‚ÇÇ F‚ÇÇ z) :
   HasZTransform (fun k => f‚ÇÅ k + f‚ÇÇ k) (fun z => F‚ÇÅ z + F‚ÇÇ z) z := by
    unfold HasZTransform -- (fun k ‚Ü¶ (fun k ‚Ü¶ f‚ÇÅ k + f‚ÇÇ k) k * z ^ (-k)) ((fun z ‚Ü¶ F‚ÇÅ z + F‚ÇÇ z) z)
    change HasSum (fun k ‚Ü¶ (f‚ÇÅ k + f‚ÇÇ k) * z ^ (-k)) ( F‚ÇÅ z + F‚ÇÇ z)
    have :  (fun k ‚Ü¶ (f‚ÇÅ k + f‚ÇÇ k) * z ^ (-k)) = (fun k ‚Ü¶(f‚ÇÅ k) * z ^ (-k) + (f‚ÇÇ k) * z ^ (-k)) := by
      ext k
      ring_nf
    simp only[this]
    apply HasSum.add  hz‚ÇÅ hz‚ÇÇ
