import Mathlib.Tactic
import Mathlib.Data.Complex.Abs
import Paperproof

open Complex

set_option maxHeartbeats 10000000
set_option maxRecDepth 1000

-- Because we're al engineers here.
def j : ‚ÑÇ := Complex.I

def Signal : Type := ‚Ñ§ ‚Üí ‚ÑÇ

-- Some useful sets for partitioning sums over ‚Ñ§.
def PosInt : Set ‚Ñ§ := { k | k > 0 }
def NonNegInt : Set ‚Ñ§ := { k | k ‚â• 0 }
def NegInt : Set ‚Ñ§ := { k | k < 0 }
def NonPosInt : Set ‚Ñ§ := { k | k ‚â§ 0 }

/--
The union of non-positive integers and positive integers is ‚Ñ§.
-/
@[simp]
theorem nonpos_pos_union : NonPosInt ‚à™ PosInt = Set.univ := by
  ext x
  apply Iff.intro
  . intro hmp
    trivial

  . intro hmpr
    by_cases hx : x > 0
    case pos => exact Set.mem_union_right NonPosInt hx
    case neg =>
      have : x ‚â§ 0 := by exact Int.not_lt.mp hx
      exact Set.mem_union_left PosInt this

/--
Symmetric verison of nonpos_pos_union
-/
@[simp]
theorem pos_nonpos_union : PosInt ‚à™ NonPosInt = Set.univ := by
  rw[‚ÜêSet.union_comm]
  exact nonpos_pos_union

/--
The union of non-negative integers and negative integers is ‚Ñ§.
-/
@[simp]
theorem nonneg_neg_union : NonNegInt ‚à™ NegInt = Set.univ := by
  ext x
  apply Iff.intro
  . intro hmp
    trivial

  . intro hmpr
    by_cases hx : x < 0
    case pos => exact Set.mem_union_right NonNegInt hx
    case neg =>
      have : x ‚â• 0 := by exact Int.not_lt.mp hx
      exact Set.mem_union_left NegInt this

/--
Symmetric verison of neg_nonneg_union
-/
@[simp]
theorem neg_nonneg_union : NegInt ‚à™ NonNegInt = Set.univ := by
  rw[‚ÜêSet.union_comm]
  exact nonneg_neg_union

/--
Shows that there's a bijection between the non-negative integers and ‚Ñï.
-/
@[simp]
def nonNegInt_nat_equiv : NonNegInt ‚âÉ ‚Ñï where
  toFun := fun i ‚Ü¶ Int.toNat i
  invFun := by
    intro n
    refine' ‚ü®Int.ofNat n, _‚ü©
    exact Int.zero_le_ofNat n

  left_inv := by
    intro n
    simp[]
    refine Eq.symm (Subtype.coe_eq_of_eq_mk ?_)
    obtain ‚ü® i,hn‚ü© := n
    simp[]
    assumption

  right_inv := by
    intro n
    rfl

/--
Shows that the positive integers and the negative integers are disjoint.
That is, PosInt ‚à© NegInt = ‚àÖ
-/
@[simp]
lemma int_pos_neg_disjoint : Disjoint PosInt NegInt := by
    refine' Set.disjoint_iff_forall_ne.mpr _
    intro a _ b _

    have : a > 0 := by assumption
    have : b < 0 := by assumption
    linarith

/--
Symmetric verison of int_pos_neg_disjoint
-/
@[simp]
lemma neg_pos_int_disjoint : Disjoint NegInt PosInt := by
  exact Disjoint.symm int_pos_neg_disjoint

/--
Shows that the positive integers and the non-positive integers are disjoint.
That is, PosInt ‚à© NonPosInt = ‚àÖ
-/
@[simp]
lemma int_pos_nonpos_disjoint : Disjoint PosInt NonPosInt := by
    refine' Set.disjoint_iff_forall_ne.mpr _
    intro a _ b _

    have : a > 0 := by assumption
    have : b ‚â§ 0 := by assumption
    linarith

/--
Symmetric version of int_pos_nonpos_disjoint
-/
@[simp]
lemma int_nonpos_pos_disjoint : Disjoint NonPosInt PosInt := by
  exact Disjoint.symm int_pos_nonpos_disjoint

/--
Shows that the negative integers and the non-negative integers are disjoint.
That is, NegInt ‚à© NonNegInt = ‚àÖ
-/
@[simp]
lemma int_neg_nonneg_disjoint : Disjoint NegInt NonNegInt := by
    refine' Set.disjoint_iff_forall_ne.mpr _
    intro a _ b _

    have : a < 0 := by assumption
    have : b ‚â• 0 := by assumption
    linarith

/--
Symmetric version of int_neg_nonneg_disjoint
-/
@[simp]
lemma int_nonneg_neg_disjoint : Disjoint NonNegInt NegInt := by
  exact Disjoint.symm int_neg_nonneg_disjoint

@[simp]
noncomputable def zt_kernel (x : Signal) (z : ‚ÑÇ) : ‚Ñ§ ‚Üí ‚ÑÇ :=
  fun k ‚Ü¶ x (k) * z^(-k : ‚Ñ§)

@[simp]
noncomputable def ZTransform (x : Signal) (z : ‚ÑÇ) :=
  ‚àë' k : ‚Ñ§, x (k) * z^(-k : ‚Ñ§)

def HasZTransform {z : ‚ÑÇ} (x : Signal) := HasSum (fun (k : ‚Ñ§) ‚Ü¶ x k * z ^ (-k : ‚Ñ§))

@[simp]
noncomputable def ZTransformUnilateral (x : Signal) (z : ‚ÑÇ) :=
  ‚àë' k : ‚Ñï, x (k) * z^(-k : ‚Ñ§)

def HasZTransformUnilateral (x : Signal) (z : ‚ÑÇ) := HasSum (fun (n : ‚Ñ§) ‚Ü¶ x n * z ^ (-n : ‚Ñ§))

@[simp]
noncomputable def ZTransformUnilateral' (x : Signal) (z : ‚ÑÇ) :=
  ‚àë' k : NonNegInt, x (k) * z ^ (-‚Üëk : ‚Ñ§)

@[simp]
noncomputable def DiscreteTimeFourierTransform (x : Signal) (œâ : ‚Ñù) :=
  ‚àë' k : ‚Ñ§, x (k) * Complex.exp (-j * œâ * k)

@[simp]
alias ZT := ZTransform

@[simp]
alias DTFT := DiscreteTimeFourierTransform

notation "ùì©" => ZTransform
notation "ùì©_u" => ZTransformUnilateral
notation "ùìï_d" => DiscreteTimeFourierTransform

variable (x : Signal)


@[simp]
def unit_impulse (k : ‚Ñ§) : ‚ÑÇ :=
  if k = 0 then 1 else 0

theorem unit_impulse_equiv_indicator :
    ‚àÄ k : ‚Ñ§, unit_impulse k = Set.indicator {0} 1 k := by
  intro k
  by_cases k_zero : k = 0
  <;> simp[k_zero]


notation "Œ¥" => unit_impulse

@[simp]
def unit_step (k : ‚Ñ§) : ‚ÑÇ :=
  if k ‚â• 0 then 1 else 0

@[simp]
theorem unit_step_of_nonneg : ‚àÄ (k : NonNegInt), unit_step k = 1 := by
  intro ‚ü®k, hk‚ü©
  simp
  exact hk

@[simp]
theorem unit_step_of_pos : ‚àÄ (k : PosInt), unit_step k = 1 := by
  intro ‚ü®k, hk‚ü©
  simp
  exact Int.le_of_lt hk

@[simp]
theorem unit_step_of_neg : ‚àÄ (k : NegInt), unit_step k = 0 := by
  intro ‚ü®k, hk‚ü©
  simp
  exact hk

theorem unit_step_equiv_indicator : ‚àÄ k : ‚Ñ§, unit_step k = NonNegInt.indicator 1 k := by
  intro k
  unfold NonNegInt
  by_cases k_pos : k ‚â• 0
  <;> simp[k_pos]

alias u := unit_step
alias H := unit_step

/--
The rect function is one on [a, b)
-/
@[simp]
def rect (a b : ‚Ñ§) (k : ‚Ñ§) :=
  unit_step (k - a) - unit_step (k - b)

theorem ZTransformToDTFT : ‚àÄ x : Signal, (fun œâ : ‚Ñù => ùì© x (Complex.exp (j * œâ))) = ùìï_d x := by
  intro x
  ext œâ
  simp
  apply tsum_congr
  intro k
  calc
    x k * (Complex.exp (j * ‚Üëœâ) ^ k)‚Åª¬π
      = x k * (Complex.exp (j * ‚Üëœâ * ‚Üëk))‚Åª¬π := by rw [‚Üê Complex.exp_int_mul (j * ‚Üëœâ) k]; ring_nf
    _ = x k * Complex.exp (-(j * ‚Üëœâ * ‚Üëk)) := by rw [‚ÜêComplex.exp_neg (j * ‚Üëœâ * ‚Üëk)]


theorem zt_unit_impulse {z : ‚ÑÇ} (k‚ÇÄ : ‚Ñ§) : @HasZTransform z (fun k ‚Ü¶ Œ¥ (k - k‚ÇÄ)) (z ^ (-k‚ÇÄ)) := by
  rw[HasZTransform]
  simp

  have : ‚àÄ k : ‚Ñ§, k - k‚ÇÄ = 0 ‚Üî k = k‚ÇÄ := by intro _; exact Int.sub_eq_zero
  simp only[this]

  have : ‚àÄ z : ‚ÑÇ, ‚àÄ k : ‚Ñ§, (if k = k‚ÇÄ then (z ^ k)‚Åª¬π else 0) = (if k = k‚ÇÄ then z ^ (-k‚ÇÄ) else 0) := by
    intro _ k
    by_cases hk : k = k‚ÇÄ
    <;> simp[hk]
  simp [this]

  exact hasSum_ite_eq k‚ÇÄ (z ^ k‚ÇÄ)‚Åª¬π

def univ_equiv (Œ± : Type*) : Œ± ‚âÉ @Set.univ Œ± where
  toFun := fun a ‚Ü¶ ‚ü®a, by trivial‚ü©
  invFun := fun
    | ‚ü®a, _‚ü© => a

  left_inv := by exact congrFun rfl
  right_inv := by exact congrFun rfl

theorem hasSum_univ {Œ± Œ≤ : Type*} {a : Œ±} [AddCommMonoid Œ±] [TopologicalSpace Œ±]
  {f : Œ≤ ‚Üí Œ±} : HasSum (fun x : @Set.univ Œ≤ ‚Ü¶ f x) a ‚Üî HasSum f a := by
    exact (Equiv.hasSum_iff (Œ± := Œ±) (f := f) (a := a) (univ_equiv Œ≤).symm)

theorem ZTUnilateral_hasSum_equiv {z : ‚ÑÇ} {a : ‚ÑÇ} (x : Signal) :
  HasSum (fun n : ‚Ñï ‚Ü¶ x n * z ^ (-n : ‚Ñ§)) a ‚Üî
  HasSum (fun k : NonNegInt ‚Ü¶ x k * z ^ (-k : ‚Ñ§)) a := by
    exact Equiv.hasSum_iff nonNegInt_nat_equiv.symm (a := a) (
      f := fun (k : NonNegInt) ‚Ü¶ x k * z ^ (-k : ‚Ñ§))

theorem ZTUnilateral_tsum_equiv {z : ‚ÑÇ} (x : Signal) :
  (ZTransformUnilateral x) z = (ZTransformUnilateral' x) z := by
    exact Equiv.tsum_eq nonNegInt_nat_equiv.symm (
      fun (k : NonNegInt) ‚Ü¶ x k * z ^ (-k : ‚Ñ§)
    )

theorem zt_sum_unit_step {z : ‚ÑÇ} {f : Signal} {S : ‚ÑÇ} :
    HasSum (fun (k : ‚Ñ§) ‚Ü¶ u k * f k * z ^ (-k : ‚Ñ§)) S ‚Üî
    HasSum (fun (n : ‚Ñï) ‚Ü¶ f n * z ^ (-n : ‚Ñ§)) S := by

      have h_ind : ‚àÄ k : ‚Ñ§, NonNegInt.indicator 1 k * f k * z ^ (-k) =
        NonNegInt.indicator (fun k' ‚Ü¶ f k' * z ^ (-k')) k := by
          intro k
          unfold NonNegInt
          by_cases k_pos : k ‚â• 0
          <;> simp[k_pos]

      apply Iff.intro
      . intro hmp
        simp only[u, unit_step_equiv_indicator, h_ind] at hmp

        have := by exact (hasSum_subtype_iff_indicator
            (s := NonNegInt) (f := fun k' ‚Ü¶ f k' * z ^ (-k')) (a := S)).mpr hmp
        change HasSum (fun k : NonNegInt ‚Ü¶ f k * z ^ (-k : ‚Ñ§)) S at this

        have := by exact (Equiv.hasSum_iff
          (a := S)
          (f := fun k : NonNegInt ‚Ü¶ f k * z ^ (-k : ‚Ñ§))
          (nonNegInt_nat_equiv.symm)).mpr this

        change HasSum (fun n : ‚Ñï ‚Ü¶ f ‚Üën * z ^ (-n : ‚Ñ§)) S at this
        exact this

      . intro hmpr
        rw[‚Üêadd_zero S]
        simp only[‚ÜêhasSum_univ (f := fun k : ‚Ñ§ ‚Ü¶ u k * f k * z ^ (-k : ‚Ñ§))]
        rw[‚Üêneg_nonneg_union]

        refine HasSum.add_disjoint int_neg_nonneg_disjoint (a := S) (b := 0)
          (f := fun k : ‚Ñ§ ‚Ü¶ u k * f k * z ^ (-k : ‚Ñ§)) ?S_nonneg ?S_neg

        . change HasSum (fun k : NonNegInt ‚Ü¶ u k * f k * z ^ (-k : ‚Ñ§)) S


        have s_neg : HasSum (fun k : NegInt ‚Ü¶ g k) 0 := by
          have g_zero : ‚àÄ (k : NegInt), g k = 0 := by
            intro ‚ü®i, _‚ü©
            simp[g, u, unit_step]
            have : i < 0 := by assumption
            intro
            linarith

          -- Since the terms of the sum are all zero, the sum must also be zero
          simp[g_zero]
          exact hasSum_zero

        have s_nonneg : HasSum (fun k : NonNegInt ‚Ü¶ u k * f k * z ^ (-k : ‚Ñ§)) S := by
          simp only[u, unit_step_of_nonneg, one_mul]
          exact (ZTUnilateral_hasSum_equiv f).mp hmpr





theorem zt_unit_step {z : ‚ÑÇ} (h_roc : ‚Äñz‚Äñ > 1) : @HasZTransform z u (1 / (1 - z‚Åª¬π)) := by
  rw[HasZTransform]

  have : ‚àÄ k, u k * z ^ (-k) = u k * cccccbnkibrghdtluhttifkucvkkulfdkfrtivkcelnu
  1 * z ^ (-k) := by simp
  simp only [this]

  refine' zt_sum_unit_step.mpr _
  simp
  simp only[‚Üêinv_pow]

  refine' hasSum_geometric_of_norm_lt_one _
  rw[norm_inv, inv_lt_comm‚ÇÄ] <;> linarith


noncomputable def discrete_convolution (f g : Signal) : Signal :=
  fun k => ‚àë' m : ‚Ñ§, f m * g (k - m)

def ZTransformable {z : ‚ÑÇ} (f : Signal) := Summable fun k ‚Ü¶ f k * z ^ (-k)

@[simp]
theorem ZTransform_linear {z : ‚ÑÇ} (f‚ÇÅ f‚ÇÇ : Signal) (hf‚ÇÅ : @ZTransformable z f‚ÇÅ) (hf‚ÇÇ : @ZTransformable z f‚ÇÇ) (a b : ‚ÑÇ) : ùì© (fun k => a * f‚ÇÅ k + b * f‚ÇÇ k) z = a * ùì© f‚ÇÅ z + b * ùì© f‚ÇÇ z := by
  simp only[ZTransform]
  calc
  ‚àë' (k : ‚Ñ§), (a * f‚ÇÅ k + b * f‚ÇÇ k) * z ^ (-k) = ‚àë' (k : ‚Ñ§), (a * f‚ÇÅ k * z ^ (-k) + b * f‚ÇÇ k * z ^ (-k)) :=
    by group

  _ = ‚àë' (k : ‚Ñ§), a * f‚ÇÅ k * z ^ (-k) + ‚àë' (k : ‚Ñ§), b * f‚ÇÇ k * z ^ (-k) := by
    rw[tsum_add]

  _ = ‚àë' (k : ‚Ñ§), a * (f‚ÇÅ k * z ^ (-k)) + ‚àë' (k : ‚Ñ§), b * (f‚ÇÇ k * z ^ (-k)) := by group
  _ = a * ‚àë' (k : ‚Ñ§), f‚ÇÅ k * z ^ (-k) + b * ‚àë' (k : ‚Ñ§), f‚ÇÇ k * z ^ (-k) := by rw[tsum_mul_left, tsum_mul_left]

@[simp]
theorem ZTransform_time_delay (f : Signal) (n : ‚Ñ§) (z : ‚ÑÇ) :  ùì© (fun k => f (k - n)) z = z ^ (-n) * ùì© f z := by
  rw [ZTransform]
  have : (fun k => f (k - n) * z ^ (-k)) = (fun k => f k * z ^ (-(k + n))) := by
    simp
    funext k
    sorry
  sorry

@[simp]
theorem ZTransform_time_advance_one (f : Signal) (z : ‚ÑÇ) : ùì© (fun k => f (k + 1)) z = z * ùì© f z - z * f 0 := by
  sorry

@[simp]
theorem ZTransform_time_advance_n (f : Signal) (n : ‚Ñï) (z : ‚ÑÇ) : ùì© (fun k => f (k + n)) z = z^n * ùì© f z - ‚àë i in Finset.range n, z^(n - i) * f i := by
  sorry

@[simp]
theorem ZTransform_exp_mul (f : Signal) (a : ‚ÑÇ) (z : ‚ÑÇ) : ùì© (fun k => a^(-k) * f k) z = ùì© f (a * z) := by
  sorry

@[simp]
theorem ZTransform_convolution (f g : Signal) (z : ‚ÑÇ) : ùì© (discrete_convolution f g) z = ùì© f z * ùì© g z := by
  rw [ZTransform] -- ‚àë' (k : ‚Ñ§), discrete_convolution f g k * z ^ (-k) = ùì© f z * ùì© g z
  simp only [discrete_convolution] -- ‚àë' (k : ‚Ñ§), (‚àë' (m : ‚Ñ§), f m * g (k - m)) * z ^ (-k) = ùì© f z * ùì© g z


  let h := fun k => ‚àë' m : ‚Ñ§, f m * g (k - m)
  let t := fun k => h k * z ^ (-k)
  sorry


-- theorem ZTransform_IVT: := by
--   sorry

-- theorem ZTransform_FVT := by
--   sorry
